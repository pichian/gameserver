openapi: 3.0.1
info:
  title: API lotto rich for player operation.
  description: "This is a sample API server of lotto rich"
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/v2
    description: สำหรับ Production server (ไว้ Generate)
  - url: http://localhost:61/v2
    description: สำหรับ Dev server (เครื่องตัวเอง Player)
  - url: http://128.199.216.219:61/V2/
    description: สำหรับ Test play server
  - url: http://128.199.216.219:62/V2/
    description: สำหรับ Test agent server
  - url: http://128.199.216.219:63/V2/
    description: สำหรับ Test owner server
tags:
  - name: player
paths:
  /player/login:
    post:
      tags:
        - player
      summary: Logged in player user into system.
      operationId: loginPlayer
      requestBody:
        description: for player login
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/playerLoginInput"
        required: true
      responses:
        "200":
          description: successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login_success_response"
        "400":
          description: Invalid username/password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login_fail_response"
      x-swagger-router-controller: playerController
  /player/logout:
    post:
      tags:
        - player
      summary: Logged out player session.
      operationId: logoutPlayer
      requestBody:
        description: token for clear session
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestWithToken"
        required: true
      responses:
        "200":
          description: successful logout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiResponse"
      x-swagger-router-controller: playerController
  /player/register:
    post:
      tags:
        - player
      summary: Player register.
      operationId: registerPlayer
      requestBody:
        description: Player register data.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/playerRegisterRequest"
        required: true
      responses:
        "200":
          description: Register Complete.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
      x-swagger-router-controller: playerController
  /player/authenToken:
    post:
      tags:
        - player
      summary: Authenticated player token for update session.
      operationId: authenPlayerToken
      responses:
        "200":
          description: successful
      x-swagger-router-controller: playerController
  /player/info:
    post:
      tags:
        - player
      summary: Get player info ex. Player name, wallet amount.
      description: Returns amount of player wallet searching by token.
      operationId: getPlayerInfo
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeModel"
        "404":
          description: Id not found
          content: {}
      x-swagger-router-controller: playerController
  /player/playerWallet:
    post:
      tags:
        - player
      summary: Get player info ex. Player name, wallet amount.
      description: Returns amount of player wallet searching by token.
      operationId: getPlayerWallet
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeModel"
        "404":
          description: Id not found
          content: {}
      x-swagger-router-controller: playerController
  /player/paymentRequest:
    post:
      tags:
        - player
      summary: Player payment request.
      operationId: playerPaymentRequest
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/playerPaymentRequest"
        required: true
      responses:
        "200":
          description: Request Complete.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
      x-swagger-router-controller: playerController
  /player/paymentRequestList:
    post:
      tags:
        - player
      summary: Payment request list of player.
      operationId: listPlayerPaymentRequest
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/playerPaymentRequestListModel"
        "404":
          description: Empty Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/emptyResponse"
      x-swagger-router-controller: playerController
components:
  schemas:
    successResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      example:
        code: "LTR-200"
        message: "Success"
    ValidateReponse:
      properties:
        code:
          type: string
        message:
          type: string
      example:
        code: "LTR-405"
        message: "Invalid input"
    ErrorResponse:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/ErrorResponse_error"
    PlayerLoginInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    PlayerPutInput:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
    PlayerModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        playerName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        description:
          type: string
        status:
          type: integer
      example:
        playerName: "PlayerXXX"
        email: email
        username: "username123"
        password: "123456789"
        description: "This is description."
        status: 1
    playerRegisterRequest:
      type: object
      properties:
        playerName:
          type: string
        username:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        agentRefCode:
          type: string
      example:
        playerName: "PlayerXX"
        username: "PlayerXX"
        password: "123456789"
        phoneNumber: "0000000000"
        agentRefCode: ""
    playerPaymentRequest:
      type: object
      properties:
        paymentType:
          type: string
        wayToPay:
          type: string
        amount:
          type: number
      example:
        paymentType: "DP"
        wayToPay: "C"
        amount: 1000
    EmployeeModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        playerName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        description:
          type: string
        status:
          type: integer
      example:
        id: 0
        playerName: "PlayerXXX"
        email: email
        username: "username123"
        password: "123456789"
        description: "This is description."
        status: 1
    playerLoginInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      example:
        username: "Player1"
        password: "123456789"
    OwnerModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        type:
          type: integer
          description: Owner type
          format: int32
    ManagerModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        type:
          type: integer
          description: Manager type
          format: int32
    agentWallet:
      type: object
      properties:
        amount:
          type: number
    playerWallet:
      type: object
      properties:
        amount:
          type: number
    playerRank:
      type: object
      properties:
        rank:
          type: number
    playerStatus:
      type: object
      properties:
        rank:
          type: number
    totalPlayer:
      type: object
      properties:
        amount:
          type: number
      example:
        amount: 250
    totalCredit:
      type: object
      properties:
        amount:
          type: number
      example:
        amount: 150000
    promotionCredit:
      type: object
      properties:
        amount:
          type: number
      example:
        amount: 20000
    paymentModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        paymentType:
          type: string
        wayToPay:
          type: string
        agentId:
          type: integer
          format: int64
        amount:
          type: number
        promotionId:
          type: integer
          format: int64
        create_by:
          type: integer
          format: int64
        create_datetime:
          type: string
      example:
        id: 0
        paymentType: "0"
        wayToPay: "2"
        agentId: 6
        amount: 10000
        promotionId: 1
        create_by: 10
        create_datetime: "2008-03-09 16:05:07.123"
    paymentDetailModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        paymentType:
          type: string
        wayToPay:
          type: string
        agentId:
          type: integer
          format: int64
        amount:
          type: number
        promotionId:
          type: integer
          format: int64
      example:
        id: 0
        paymentType: "0"
        wayToPay: "2"
        agentId: 6
        amount: 10000
        promotionId: 1
    TransferModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        from:
          type: integer
          format: int64
        to:
          type: integer
          format: int64
        amount:
          type: number
        status:
          type: integer
          format: int64
    apiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    login_success_response:
      type: object
      properties:
        token:
          type: string
      example:
        token: token
        responseCode: "LTR-200"
        responseMessage: "Success"
    login_fail_response:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      example: { code: 404, message: "Invalid username/password" }
    ErrorResponse_error:
      type: object
      properties:
        message:
          type: string
        type:
          type: number
    emptyResponse:
      type: array
      example: { data: [], code: "LTR-200", message: "Success" }
    playerPaymentRequestListModel:
      type: object
      properties:
        data:
          type: array
        responseCode:
          type: string
        responseMessage:
          type: string
      example:
        {
          data:
            [
              { id: 0, paymentType: "DP", wayToPay: "C", amount: 1000, status: "W" },
              { id: 1, paymentType: "WD", wayToPay: "T", amount: 500, status: "W" },
            ],
          code: "LTR-I-200",
          message: "Success",
        }
    playerListModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        credit:
          type: integer
          format: int64
        status:
          type: string
      example:
        - id: 0
          username: "PlayerXXX"
          credit: 100
          status: "0"
        - id: 1
          username: "PlayerXXX"
          credit: 500
          status: "1"
    employeeListModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        status:
          type: string
      example:
        - id: 0
          username: "PlayerXXX"
          status: "0"
        - id: 1
          username: "PlayerXXX"
          status: "1"
    employeeLogModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        datetime:
          type: string
        action:
          type: string
      example:
        - id: 0
          datetime: "20-JUN-1990 08:03:00"
          action: "Ban Player 3"
        - id: 1
          datetime: "20-JUN-1990 08:03:00"
          action: "Approve Withdraw Player 1"
    playerLottoHistoryModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: string
        amount:
          type: number
        status:
          type: string
      example:
        - id: 0
          number: "789"
          amount: 50
          status: "0"
        - id: 1
          number: "123"
          amount: 60
          status: "1"
        - id: 2
          number: "555"
          amount: 10
          status: "1"
    resetPasswordModel:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      example:
        oldPassword: "123456789"
        newPassword: "987654321"
    promotionModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: integer
          format: int64
        rateType:
          type: integer
          format: int64
        rateAmount:
          type: number
        dateStart:
          type: string
        dateStop:
          type: string
        status:
          type: integer
          format: int64
        description:
          type: string
        create_by:
          type: integer
          format: int64
        create_datetime:
          type: string
      example:
        id: 0
        name: "Promotion 1"
        type: 1
        rateType: 1
        rateAmount: 10
        dateStart: "2008-03-09 16:05:07.123"
        dateStop: "2008-03-09 16:05:07.123"
        description: "Description"
        create_by: 9
        create_datetime: "2008-03-09 16:05:07.123"
    promotionListModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        rateType:
          type: integer
          format: int64
        rateAmount:
          type: number
        dateStart:
          type: string
        dateStop:
          type: string
      example:
        - id: 0
          name: "Promotion 2"
          rateType: 1
          rateAmount: 10
          dateStart: "2008-03-09 16:05:07.123"
          dateStop: "2008-03-09 16:05:07.123"
        - id: 1
          name: "Promotion 2"
          rateType: 0
          rateAmount: 15
          dateStart: "2008-03-09 16:05:07.123"
          dateStop: "2008-03-09 16:05:07.123"
    promotionDetailModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: integer
          format: int64
        rateType:
          type: integer
          format: int64
        rateAmount:
          type: number
        dateStart:
          type: string
        dateStop:
          type: string
        status:
          type: string
        description:
          type: string
      example:
        id: 0
        name: "Promotion 1"
        type: 1
        rateType: 1
        rateAmount: 10
        dateStart: "2008-03-09 16:05:07.123"
        dateStop: "2008-03-09 16:05:07.123"
        description: "Description"
    requestWithToken:
      type: object
      properties:
        token:
          type: string
      example:
        token: yourExampleToken
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
