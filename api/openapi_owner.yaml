openapi: 3.0.1
info:
  title: API lotto rich for owner or manager operation.
  description: "This is a sample API server of lotto rich"
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  # - url: http://localhost:8080/v2
  #   description: สำหรับ Production server (ไว้ Generate)
  - url: http://localhost:63/v2
    description: สำหรับ Dev server (เครื่องตัวเอง Player)
  # - url: http://128.199.216.219:61/V2/
  #   description: สำหรับ Test play server
  # - url: http://128.199.216.219:62/V2/
  #   description: สำหรับ Test agent server
  # - url: http://128.199.216.219:63/V2/
  #   description: สำหรับ Test owner server
tags:
  - name: owner
paths:
  /owner/login:
    post:
      tags:
        - owner
      summary: Logged in owner user into system.
      operationId: loginOwner
      requestBody:
        description: for owner login
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ownerLoginInput"
        required: true
      responses:
        "200":
          description: successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login_success_response"
        "400":
          description: Invalid username/password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login_fail_response"
      x-swagger-router-controller: ownerController
  /owner/logout:
    post:
      tags:
        - owner
      summary: Loggged out current logged in user session.
      operationId: logoutOwner
      requestBody:
        description: token for clear session
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestWithToken"
        required: true
      responses:
        "200":
          description: successful logout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiResponse"
      x-swagger-router-controller: ownerController
  # /agent/paymentRequest:
  #   post:
  #     tags:
  #       - agent
  #     summary: Agent payment request insert.
  #     operationId: agentPaymentRequest
  #     security:
  #       - bearerAuth: []
  #     requestBody:
  #       description: Agent payment request insert data.
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/paymentRequestModel"
  #       required: true
  #     responses:
  #       "200":
  #         description: Insert Complete.
  #       "405":
  #         description: Invalid input
  #         content: {}
  #     x-swagger-router-controller: agentController
  # /agent/paymentRequestList:
  #   post:
  #     tags:
  #       - agent
  #     summary: List agent payment request list by agent id.
  #     operationId: listAgentPaymentRequest
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/paymentRequestListModel"
  #       "404":
  #         description: Empty Response
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/emptyResponse"
  #     x-swagger-router-controller: agentController
  # /agent/paymentDetail:
  #   post:
  #     tags:
  #       - agent
  #     summary: Get a single payment detail by payment id.
  #     description: Returns a single payment detail by payment id.
  #     operationId: getPaymentDetailById
  #     security:
  #       - bearerAuth: []
  #     requestBody:
  #       description: Agent payment request insert data.
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/paymentInfoId"
  #       required: true
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/paymentDetailModel"
  #       "404":
  #         description: Id not found
  #         content: {}
  #     x-swagger-router-controller: agentController
  /owner/approveAgentPayment:
    post:
      tags:
        - owner
      summary: Approve agent payment.
      description: Approve agent payment by payment id.
      operationId: approveAgentPaymentRequest
      security:
        - bearerAuth: []
      requestBody:
        description: "request by payment info"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/approvePaymentInfo"
        required: true
      responses:
        "200":
          description: Approve Complete.
        "404":
          description: Id not found
          content: {}
      x-swagger-router-controller: ownerController
  /owner/disapproveAgentPayment:
    post:
      tags:
        - owner
      summary: Disapprove agent payment.
      description: Disapprove agent payment by payment id.
      operationId: disapproveAgentPaymentRequest
      security:
        - bearerAuth: []
      requestBody:
        description: "Get this detail from table "
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/approvePaymentInfo"
        required: true
      responses:
        "200":
          description: Approve Complete.
        "404":
          description: Id not found
          content: {}
      x-swagger-router-controller: ownerController
  /owner/cancelAgentPayment:
    post:
      tags:
        - owner
      summary: Cancel agent payment.
      description: Cancel agent payment by payment id.
      operationId: cancelAgentPaymentRequest
      # security:
      #   - bearerAuth: []
      requestBody:
        description: "request by payment info"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/approvePaymentInfo"
        required: true
      responses:
        "200":
          description: Approve Complete.
        "404":
          description: Id not found
          content: {}
      x-swagger-router-controller: ownerController
  # /agent/agentDetail:
  #   post:
  #     tags:
  #       - agent
  #     summary: Finds agent detail include wallet amount, sum player wallet.
  #     description: Finds agent detail.
  #     operationId: findAgentDetail
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/agentDetail"
  #               x-content-type: application/json
  #       "400":
  #         description: Invalid tag value
  #         content: {}
  #     x-swagger-router-controller: agentController
  /owner/agent/agentRegister:
    post:
      tags:
        - owner
      summary: Owner agent register.
      operationId: ownerAgentRegister
      security:
        - bearerAuth: []
      requestBody:
        description: Register new Agent by Owner.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/agentRegisterRequest"
        required: true
      responses:
        "200":
          description: Insert Complete.
        "405":
          description: Invalid input
          content: {}
      x-swagger-router-controller: ownerController
  /owner/agent/agentList:
    post:
      tags:
        - owner
      summary: List of Agent by owner id..
      operationId: listAgentByOwnerId
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/playerListModel"
      #   "404":
      #     description: Empty Response
      #     content:
      #       application/json:
      #         schema:
      #           $ref: "#/components/schemas/emptyResponse"
      x-swagger-router-controller: ownerController
  /owner/agent/paymentRequestList:
    post:
      tags:
        - owner
      summary: List agent payment request list all.
      operationId: listAgentPaymentRequestAll
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/paymentRequestListModel"
        "404":
          description: Empty Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/emptyResponse"
      x-swagger-router-controller: ownerController
  /owner/player/playerList:
    post:
      tags:
        - owner
      summary: List of player.
      operationId: listPlayer
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/playerListModel"
        "404":
          description: Empty Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/emptyResponse"
      x-swagger-router-controller: ownerController
  /owner/agent/paymentRequest:
    post:
      tags:
        - owner
      summary: Insert payment request of owner by Owner.
      operationId: agentPaymentRequestByOwner
      # security:
      #   - bearerAuth: []
      requestBody:
        description: Insert new agent payemnt request by owner.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/paymentRequestModel"
        required: true
      responses:
        "200":
          description: Insert Complete.
        "405":
          description: Invalid input
          content: {}
      x-swagger-router-controller: ownerController
  # /player/paymentRequestListAll:
  #   post:
  #     tags:
  #       - agent
  #     summary: Payment request list of player. Return all data
  #     operationId: listPlayerPaymentRequestAll
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/paymentRequestListModel"
  #       "404":
  #         description: Empty Response
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/emptyResponse"
  #     x-swagger-router-controller: agentController
  /agent/paymentRequestListOfAgent:
    post:
      tags:
        - owner
      summary: Payment request list of agent. When go to agent detail page.
      operationId: paymentRequestListOfAgent
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/paymentRequestListModel"
        "404":
          description: Empty Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/emptyResponse"
      x-swagger-router-controller: ownerController
  /agent/paymentDetail:
    post:
      tags:
        - owner
      summary: Get a single payment detail by payment id.
      description: Returns a single payment detail by payment id.
      operationId: getAgentPaymentDetailById
      security:
        - bearerAuth: []
      requestBody:
        description: Request by id of payment.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/paymentInfoId"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/paymentDetailModel"
        "404":
          description: Id not found
          content: {}
      x-swagger-router-controller: ownerController
  /agent/agentWallet:
    post:
      tags:
        - owner
      summary: Finds agent wallet amount by agent id.
      operationId: findAgentWalletById
      security:
        - bearerAuth: []
      requestBody:
        description: Request by object of agent id.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestWithAgentRefCode"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/agentWallet"
                x-content-type: application/json
        "400":
          description: Invalid tag value
          content: {}
      x-swagger-router-controller: ownerController
  /agent/agentInfo:
    post:
      tags:
        - owner
      summary: Finds status, name by agent id.
      operationId: getAgentInfo
      security:
        - bearerAuth: []
      requestBody:
        description: Request by object of agent id.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestWithAgentRefCode"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/agentInfo"
                x-content-type: application/json
        "400":
          description: Invalid tag value
          content: {}
      x-swagger-router-controller: ownerController
  /employee/changePassword:
    post:
      tags:
        - owner
      summary: Reset employee password..
      description: Get old and new password and check.
      operationId: resetEmployeePassword
      security:
        - bearerAuth: []
      requestBody:
        description: employee id and new password data.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/resetPasswordRequest"
        required: true
      responses:
        "200":
          description: change successful
      x-swagger-router-controller: agentController
  # /player/banPlayer/{playerId}:
  #   post:
  #     tags:
  #       - agent
  #     summary: Ban player.
  #     description: Ban player.
  #     operationId: banPlayer.
  #     parameters:
  #       - name: playerId
  #         in: path
  #         description: Id of agent.
  #         required: true
  #         style: simple
  #         explode: false
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: successful operation
  #       "400":
  #         description: Invalid tag value
  #         content: {}
  #     x-swagger-router-controller: agentController
  # /player/lottoHistory/:
  #   post:
  #     tags:
  #       - agent
  #     summary: List player lotto history.
  #     operationId: listPlayerLottoHistory
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/playerLottoHistoryModel"
  #       "404":
  #         description: Empty Response
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/emptyResponse"
  #     x-swagger-router-controller: agentController
  # /agent/employee/employeeRegister:
  #   post:
  #     tags:
  #       - agent
  #     summary: Agent employee register.
  #     operationId: agentEmployeeRegister
  #     security:
  #       - bearerAuth: []
  #     requestBody:
  #       description: register new employee by agent.
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/employeeRegisterModel"
  #       required: true
  #     responses:
  #       "200":
  #         description: Insert Complete.
  #       "405":
  #         description: Invalid input
  #         content: {}
  #     x-swagger-router-controller: agentController
  /owner/employee/employeeList:
    post:
      tags:
        - owner
      summary: List of employee
      operationId: listEmployee
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employeeListModel"
        "404":
          description: Empty Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/emptyResponse"
      x-swagger-router-controller: ownerController
  /owner/employee/employeeDetail:
    post:
      tags:
        - owner
      summary: Single Employee detail.
      description: Returns a single employee detail.
      operationId: getEmployeeDetail
      security:
        - bearerAuth: []
      requestBody:
        description: send employee id with body.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeeInfo"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employeeRegisterModel"
        "404":
          description: Id not found
          content: {}
      x-swagger-router-controller: agentController
  /employee/banEmployee:
    post:
      tags:
        - owner
      summary: Ban employee.
      description: Ban employee.
      operationId: banEmployee
      security:
        - bearerAuth: []
      requestBody:
        description: Request employee ref cdoe.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestWithEmployeeeRefCode"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid tag value
          content: {}
      x-swagger-router-controller: agentController
  /employee/unBanEmployee:
    post:
      tags:
        - agent
      summary: Unban employee.
      operationId: unBanEmployee
      security:
        - bearerAuth: []
      requestBody:
        description: Request employee ref code.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestWithEmployeeeRefCode"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid tag value
          content: {}
      x-swagger-router-controller: agentController
  # /employee/employeeInfo:
  #   post:
  #     tags:
  #       - agent
  #     summary: Get employee info when employee logged in.
  #     description: Get id by req.header, Returns a single employee info .
  #     operationId: getEmployeeInfo
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/employeeRegisterModel"
  #       "404":
  #         description: Id not found
  #         content: {}
  #     x-swagger-router-controller: agentController
  # /employee/changeEmployeeStatus/{employeeId}:
  #   post:
  #     tags:
  #       - agent
  #     summary: Change employee Ban/UnBan.
  #     description: Ban/Unban.
  #     operationId: changeEmployeeStatus
  #     parameters:
  #       - name: employeeId
  #         in: path
  #         description: Id of employee.
  #         required: true
  #         style: simple
  #         explode: false
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: change status successful
  #       "404":
  #         description: Id not found
  #         content: {}
  #     x-swagger-router-controller: agentController
  # /employee/resetPassword/{employeeId}:
  #   post:
  #     tags:
  #       - agent
  #     summary: Reset employee password..
  #     description: Get old and new password and check.
  #     operationId: resetEmployeePassword
  #     requestBody:
  #       description: old/new password data.
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/resetPasswordModel"
  #       required: true
  #     responses:
  #       "200":
  #         description: change status successful
  #     x-swagger-router-controller: agentController
  # /employee/employeeLog/{employeeId}:
  #   post:
  #     tags:
  #       - agent
  #     summary: List of employee log.
  #     operationId: listEmployeeLog
  #     parameters:
  #       - name: employeeId
  #         in: path
  #         description: Id of employee.
  #         required: true
  #         style: simple
  #         explode: false
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/employeeLogModel"
  #       "404":
  #         description: Empty Response
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/emptyResponse"
  #     x-swagger-router-controller: agentController
  /owner/promotion/promotionCreate:
    post:
      tags:
        - owner
      summary: Promotion create by owner.
      operationId: promotionCreate
      security:
        - bearerAuth: []
      requestBody:
        description: create new promotion by owner.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/promotionCreateModel"
        required: true
      responses:
        "200":
          description: Insert Complete.
        "405":
          description: Invalid input
          content: {}
      x-swagger-router-controller: ownerController
  /owner/promotion/promotionListAll:
    post:
      tags:
        - owner
      summary: List of promotion.
      operationId: listPromotionAll
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/promotionListModel"
        "404":
          description: Empty Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/emptyResponse"
      x-swagger-router-controller: ownerController
  /owner/promotion/promotionDetail:
    post:
      tags:
        - owner
      summary: Get single promotion detail.
      description: Returns a single promotion detail by promotionId id.
      operationId: getPromotionDetailById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/promotionDetailModel"
        "404":
          description: Id not found
          content: {}
      x-swagger-router-controller: ownerController
  /owner/promotion/promotionUpdate:
    post:
      tags:
        - owner
      summary: Promotion update.
      operationId: promotionUpdate
      security:
        - bearerAuth: []
      requestBody:
        description: update data.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/promotionCreateModel"
        required: true
      responses:
        "200":
          description: Update Complete.
        "405":
          description: Invalid input
          content: {}
      x-swagger-router-controller: ownerController
  /owner/promotion/promotionStop:
    post:
      tags:
        - onwer
      summary: Promotion stop.
      operationId: promotionStop
      requestBody:
        description: Stop Promotuion by id.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/promotionRequestModel"
        required: true
      responses:
        "200":
          description: Update Complete.
        "405":
          description: Invalid input
          content: {}
      x-swagger-router-controller: ownerController
  /player/playerInfo:
    post:
      tags:
        - owner
      summary: Finds player rank and status by player id.
      description: Finds player rank and status.
      operationId: findPlayerInfo
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/playerRank"
                x-content-type: application/json
        "400":
          description: Invalid tag value
          content: {}
      x-swagger-router-controller: agentController
  /player/playerWallet:
    post:
      tags:
        - owner
      summary: Finds player wallet amount by player id.
      description: Finds player wallet.
      operationId: findPlayerWalletById
      security:
        - bearerAuth: []
      requestBody:
        description: Request player Id.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestWithPlayerRefCode"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/playerWallet"
                x-content-type: application/json
        "400":
          description: Invalid tag value
          content: {}
      x-swagger-router-controller: agentController
  /player/paymentRequestListOfPlayer:
    post:
      tags:
        - owner
      summary: Payment request list of player. Return all data
      operationId: paymentRequestListOfPlayer
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/paymentRequestListModel"
        "404":
          description: Empty Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/emptyResponse"
      x-swagger-router-controller: agentController
  /agent/promotion/promotionList:
    post:
      tags:
        - owner
      summary: List of promotion by agent id.
      operationId: listPromotionByAgentId
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/promotionListModel"
        "404":
          description: Empty Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/emptyResponse"
      x-swagger-router-controller: agentController
  /player/banPlayer:
    post:
      tags:
        - owner
      summary: Ban player.
      description: Ban player.
      operationId: banPlayer
      security:
        - bearerAuth: []
      requestBody:
        description: Request player refCode.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestWithPlayerRefCode"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid tag value
          content: {}
      x-swagger-router-controller: agentController
  /player/unBanPlayer:
    post:
      tags:
        - onwer
      summary: Unban player.
      operationId: unBanPlayer
      security:
        - bearerAuth: []
      requestBody:
        description: Request player refCode.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestWithPlayerRefCode"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid tag value
          content: {}
      x-swagger-router-controller: agentController
  /owner/approvePlayerPayment:
    post:
      tags:
        - owner
      summary: Approve player payment.
      description: Approve player payment by payment ref code.
      operationId: approvePlayerPaymentRequest
      security:
        - bearerAuth: []
      requestBody:
        description: "Approve "
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/approvePaymentInfo"
        required: true
      responses:
        "200":
          description: Approve Complete.
        "404":
          description: Id not found
          content: {}
      x-swagger-router-controller: agentController
  /owner/disapprovePlayerPayment:
    post:
      tags:
        - owner
      summary: Disapprove player payment.
      description: Disapprove player payment by payment refCode.
      operationId: disapprovePlayerPaymentRequest
      security:
        - bearerAuth: []
      requestBody:
        description: "Get this detail from table "
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/approvePaymentInfo"
        required: true
      responses:
        "200":
          description: Approve Complete.
        "404":
          description: Id not found
          content: {}
      x-swagger-router-controller: agentController
  /agent/cancelPlayerPayment:
    post:
      tags:
        - owner
      summary: Cancel player payment.
      description: Cancel player payment by payment refCode.
      operationId: cancelPlayerPaymentRequest
      security:
        - bearerAuth: []
      requestBody:
        description: "Approve "
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/approvePaymentInfo"
        required: true
      responses:
        "200":
          description: Approve Complete.
        "404":
          description: Id not found
          content: {}
      x-swagger-router-controller: agentController
components:
  schemas:
    SuccessResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      example:
        code: "LTR-200"
        message: "Success"
    ValidateReponse:
      properties:
        code:
          type: string
        message:
          type: string
      example:
        code: "LTR-405"
        message: "Invalid input"
    ErrorResponse:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/ErrorResponse_error"
    PlayerLoginInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    PlayerPutInput:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
    playerModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        playerName:
          type: string
        phoneNumber:
          type: string
        username:
          type: string
        password:
          type: string
        description:
          type: string
        status:
          type: string
      example:
        playerName: "PlayerXXX"
        phoneNumber: "000000000"
        username: "username123"
        password: "123456789"
        description: "This is description."
        status: "active"
    agentRegisterRequest:
      type: object
      properties:
        agentName:
          type: string
        username:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        description:
          type: string
        status:
          type: string
      example:
        {
          agentName: "AgentXX",
          email: "test@test.com",
          phoneNumber: "0000000000",
          username: "AgentXX",
          password: "123456789",
          description: "desc..",
          status: "active",
        }
    ownerRegisterRequest:
      type: object
      properties:
        ownerName:
          type: string
        username:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        description:
          type: string
        status:
          type: string
      example:
        {
          ownerName: "owner01",
          email: "test@test.com",
          phoneNumber: "0000000000",
          username: "owner01",
          password: "123456789",
          description: "desc..",
          status: "active",
        }
    employeeRegisterModel:
      type: object
      properties:
        title:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        username:
          type: string
        password:
          type: string
        description:
          type: string
        workBrginDate:
          type: string
        status:
          type: string
      example:
        {
          title: "นาย",
          firstname: "test",
          lastname: "test",
          email: "test@test.com",
          phoneNumber: "0000000000",
          username: "emp0",
          password: "123456789",
          description: "test",
          workBrginDate: "23-Sep-2021 01:07:15",
          status: "active",
        }
    ownerLoginInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      example: { username: "AgentXX", password: "123456789" }
    OwnerModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        type:
          type: integer
          description: Owner type
          format: int32
    ManagerModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        type:
          type: integer
          description: Manager type
          format: int32
    agentDetail:
      type: object
      properties:
        amountCoin:
          type: number
        totalPlayer:
          type: number
        totalPlayerCredit:
          type: number
        totalPromotionnCredit:
          type: number
    agentWallet:
      type: object
      properties:
        amount_coin:
          type: number
    agentInfo:
      type: object
      properties:
        agentName:
          type: string
        status:
          type: string
      example: { agentName: "AgentXX", status: "active" }
    playerStatus:
      type: object
      properties:
        rank:
          type: number
    totalPlayer:
      type: object
      properties:
        amount:
          type: number
      example:
        amount: 250
    totalCredit:
      type: object
      properties:
        amount:
          type: number
      example:
        amount: 150000
    employeeInfo:
      type: object
      properties:
        empId:
          type: integer
          format: int64
      example: { empId: 1 }
    paymentInfoId:
      type: object
      properties:
        paymentId:
          type: integer
          format: int64
      example: { paymentId: 1 }
    approvePaymentInfo:
      type: object
      example: { id: 11, paymentType: "DP", wayToPay: "T", amount: 10000 }
    promotionCredit:
      type: object
      properties:
        amount:
          type: number
      example:
        amount: 20000
    paymentRequestModel:
      type: object
      properties:
        paymentType:
          type: string
        wayToPay:
          type: string
        amount:
          type: number
        promotionId:
          type: integer
          format: int64
          nullable: true
      example:
        {
          paymentType: "DP",
          wayToPay: "T",
          paymentAmount: 1000,
          promotionId: 1,
        }
    paymentDetailModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        paymentType:
          type: string
        wayToPay:
          type: string
        agentId:
          type: integer
          format: int64
        amount:
          type: number
        promotionId:
          type: integer
          format: int64
      example:
        id: 0
        paymentType: "0"
        wayToPay: "2"
        agentId: 6
        amount: 10000
        promotionId: 1
    TransferModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        from:
          type: integer
          format: int64
        to:
          type: integer
          format: int64
        amount:
          type: number
        status:
          type: integer
          format: int64
    apiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    login_success_response:
      type: object
      properties:
        token:
          type: string
      example:
        token: token
    login_fail_response:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      example: { code: 404, message: "Invalid username/password" }
    ErrorResponse_error:
      type: object
      properties:
        message:
          type: string
        type:
          type: number
    emptyResponse:
      type: object
      example: { data: [], code: "LTR-200", message: "Success" }
    paymentRequestListModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        wayToPay:
          type: string
        playerName:
          type: string
        promotion:
          type: string
        amount:
          type: number
          format: int64
        status:
          type: string
      example:
        - id: 0
          type: "Deposit"
          wayToPay: "Cash"
          playerName: "PlayerXXX"
          promotion: "Promotion1"
          amount: 100
          status: "0"
        - id: 1
          type: "Deposit"
          wayToPay: "Cash"
          playerName: "PlayerXXX"
          promotion: "Promotion1"
          amount: 100
          status: "0"
    playerListModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        credit:
          type: integer
          format: int64
        status:
          type: string
      example:
    employeeListModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        status:
          type: string
      example:
        - id: 0
          username: "PlayerXXX"
          status: "0"
        - id: 1
          username: "PlayerXXX"
          status: "1"
    employeeLogModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        datetime:
          type: string
        action:
          type: string
      example:
        - id: 0
          datetime: "20-JUN-1990 08:03:00"
          action: "Ban Player 3"
        - id: 1
          datetime: "20-JUN-1990 08:03:00"
          action: "Approve Withdraw Player 1"
    playerLottoHistoryModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: string
        amount:
          type: number
        status:
          type: string
      example:
        - id: 0
          number: "789"
          amount: 50
          status: "0"
        - id: 1
          number: "123"
          amount: 60
          status: "1"
        - id: 2
          number: "555"
          amount: 10
          status: "1"
    resetPasswordModel:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      example:
        oldPassword: "123456789"
        newPassword: "987654321"
    promotionCreateModel:
      type: object
      properties:
        promotionName:
          type: string
        promotionType:
          type: string
        rateType:
          type: string
        rateAmount:
          type: number
        dateStart:
          type: string
        dateStop:
          type: string
        description:
          type: string
        status:
          type: string
      example:
        {
          promotionName: "Prmotion 1",
          promotionType: "ฟรีเครดิต",
          rateType: "fixed",
          rateAmount: 500,
          dateStart: "2008-03-09 16:05:07.123",
          dateStop: "2008-4-09 16:05:07.123",
          description: "",
          status: "active",
        }
    promotionListModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        promotionName:
          type: string
        promotionType:
          type: string
        rateType:
          type: integer
          format: int64
        rateAmount:
          type: number
        dateStart:
          type: string
        dateStop:
          type: string
      example:
        [
          {
            id: 1,
            promotionName: "Promotion 1",
            promotionType: "freeCredit",
            rateType: "fixed",
            rateAmount: 200,
            dateStart: "2021-09-01 13:13:10",
            dateStop: "2021-09-20 13:13:12",
          },
          {
            id: 2,
            promotionName: "Promotion 2",
            promotionType: "newYear",
            rateType: "percent",
            rateAmount: 10,
            dateStart: "2021-09-01 13:13:10",
            dateStop: "2021-09-20 13:13:12",
          },
        ]
    promotionDetailModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: integer
          format: int64
        rateType:
          type: integer
          format: int64
        rateAmount:
          type: number
        dateStart:
          type: string
        dateStop:
          type: string
        status:
          type: string
        description:
          type: string
      example:
        id: 0
        name: "Promotion 1"
        type: 1
        rateType: 1
        rateAmount: 10
        dateStart: "2008-03-09 16:05:07.123"
        dateStop: "2008-03-09 16:05:07.123"
        description: "Description"
    requestWithToken:
      type: object
      properties:
        token:
          type: string
      example:
        token: yourExampleToken
    requestWithAgentRefCode:
      type: object
      properties:
        agentRefCode:
          type: string
      example:
        agentId: "ag00156161056418"
    requestWithEmployeeeRefCode:
      type: object
      properties:
        employeeRefCode:
          type: string
      example:
        employeeRefCode: 1
    resetPasswordRequest:
      type: object
      properties:
        employeeId:
          type: integer
        newPassword:
          type: string
      example:
        employeeId: 1
        newPassword: "987654321"
    playerRank:
      type: object
      properties:
        rank:
          type: number
    playerWallet:
      type: object
      properties:
        amount:
          type: number
    requestWithPlayerRefCode:
      type: object
      example: { playerRefCode: "py000001" }
    promotionRequestModel:
      type: object
      properties:
        promotionCode:
          type: string
      example: { promotionCode: "prm001" }
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
